# Multi-stage build para optimizar imagen de producciÃ³n
# Stage 1: Build assets
FROM node:20-alpine AS node-build

WORKDIR /var/www
COPY package*.json ./
RUN npm ci

COPY . .
RUN npm run build

# Stage 2: Composer dependencies
FROM composer:2 AS composer-build

WORKDIR /var/www
COPY composer*.json ./
RUN composer install --no-dev --optimize-autoloader --no-scripts

# Stage 3: Production image
FROM php:8.3-fpm

# Set timezone
ENV TZ=America/Santiago
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    libzip-dev \
    zip \
    unzip \
    libpq-dev \
    nginx \
    supervisor \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install PHP extensions
ADD https://github.com/mlocati/docker-php-extension-installer/releases/latest/download/install-php-extensions /usr/local/bin/
RUN chmod +x /usr/local/bin/install-php-extensions \
    && install-php-extensions pdo pgsql pdo_pgsql mbstring exif pcntl bcmath gd intl zip curl xml sockets opcache

# Configure PHP for production
RUN echo "opcache.enable=1" >> /usr/local/etc/php/conf.d/opcache.ini \
    && echo "opcache.memory_consumption=256" >> /usr/local/etc/php/conf.d/opcache.ini \
    && echo "opcache.max_accelerated_files=20000" >> /usr/local/etc/php/conf.d/opcache.ini \
    && echo "opcache.validate_timestamps=0" >> /usr/local/etc/php/conf.d/opcache.ini

# Copy Composer binary
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Create app user
RUN useradd -G www-data,root -u 1000 -d /home/app app \
    && mkdir -p /home/app/.composer \
    && chown -R app:app /home/app

# Set working directory
WORKDIR /var/www

# Copy composer dependencies
COPY --from=composer-build --chown=app:app /var/www/vendor /var/www/vendor

# Copy built assets
COPY --from=node-build --chown=app:app /var/www/public/build /var/www/public/build

# Copy application code
COPY --chown=app:app . /var/www

# Set permissions
RUN chown -R app:app /var/www \
    && chmod -R 755 /var/www/storage \
    && chmod -R 755 /var/www/bootstrap/cache

# Configure nginx
COPY nginx.prod.conf /etc/nginx/sites-available/default
RUN rm /etc/nginx/sites-enabled/default \
    && ln -s /etc/nginx/sites-available/default /etc/nginx/sites-enabled/default

# Configure supervisor
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Create startup script
COPY docker-entrypoint-prod.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint-prod.sh

USER app

EXPOSE 80

ENTRYPOINT ["docker-entrypoint-prod.sh"]
