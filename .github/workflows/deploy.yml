name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/certificados

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testing
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: pdo, pgsql, pdo_pgsql, mbstring, exif, pcntl, bcmath, gd, intl, zip

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install Node Dependencies
      run: npm ci

    - name: Build Assets
      run: npm run build

    - name: Create .env file
      run: |
        cp .env.example .env
        php artisan key:generate

    - name: Run Tests
      env:
        DB_CONNECTION: pgsql
        DB_HOST: 127.0.0.1
        DB_PORT: 5432
        DB_DATABASE: testing
        DB_USERNAME: postgres
        DB_PASSWORD: password
        APP_ENV: testing
        CACHE_STORE: array
        SESSION_DRIVER: array
        QUEUE_CONNECTION: sync
        VITE_APP_ENV: testing
      run: |
        php artisan migrate --force
        php artisan test

  build:
    needs: test
    runs-on: ubuntu-latest

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Deploy to DigitalOcean
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USER }}
        key: ${{ secrets.DO_SSH_KEY }}
        script: |
          # Update system
          sudo apt-get update

          # Install Docker if not installed
          if ! command -v docker &> /dev/null; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $USER
          fi

          # Install Docker Compose if not installed
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi

          # Create app directory
          sudo mkdir -p /opt/certificados
          cd /opt/certificados

          # Download deployment files
          sudo curl -L https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.prod.yml -o docker-compose.yml
          sudo curl -L https://raw.githubusercontent.com/${{ github.repository }}/main/deploy.sh -o deploy.sh
          sudo chmod +x deploy.sh

          # Create/update .env file with secrets
          sudo tee .env > /dev/null <<EOF
          # App Configuration
          APP_NAME=Certificados
          APP_ENV=production
          APP_KEY=${{ secrets.APP_KEY }}
          APP_DEBUG=false
          APP_URL=${{ secrets.APP_URL }}

          # Database Configuration
          DB_CONNECTION=pgsql
          DB_HOST=postgresql
          DB_PORT=5432
          DB_DATABASE=${{ secrets.DB_DATABASE }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}

          # Cache and Session
          CACHE_DRIVER=file
          SESSION_DRIVER=file
          QUEUE_CONNECTION=sync
          SESSION_LIFETIME=120

          # Mail Configuration
          MAIL_MAILER=${{ secrets.MAIL_MAILER }}
          MAIL_HOST=${{ secrets.MAIL_HOST }}
          MAIL_PORT=${{ secrets.MAIL_PORT }}
          MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
          MAIL_ENCRYPTION=${{ secrets.MAIL_ENCRYPTION }}
          MAIL_FROM_ADDRESS=${{ secrets.MAIL_FROM_ADDRESS }}
          MAIL_FROM_NAME=Certificados

          # Docker Configuration
          DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          IMAGE_TAG=${{ github.sha }}

          # Logging
          LOG_CHANNEL=stack
          LOG_LEVEL=error
          EOF

          # Run deployment
          sudo ./deploy.sh ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

    - name: Notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
        fi
